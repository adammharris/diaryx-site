---
import "./DiaryxLayout.css";
const { frontmatter, trimFirstHeading = false } = Astro.props;

const formatFrontmatterValue = (value: unknown) => {
  if (value instanceof Date) {
    return value.toISOString().split("T")[0];
  }

  if (Array.isArray(value)) {
    return value.map((item) => String(item)).join("\n");
  }

  if (typeof value === "object" && value !== null) {
    return JSON.stringify(value, null, 2);
  }

  return String(value ?? "");
};

const formatDateForDisplay = (value: unknown) => {
  if (value instanceof Date) {
    return value.toLocaleDateString(undefined, {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  }

  return String(value ?? "");
};

const formatSummaryValue = (value: unknown) => {
  if (value instanceof Date) {
    return formatDateForDisplay(value);
  }

  if (Array.isArray(value)) {
    return value.map((item) => String(item)).join(", ");
  }

  return String(value ?? "");
};

const summaryKeys = ["title", "author", "audience"] as const;
type SummaryKey = (typeof summaryKeys)[number];
const summaryLabels: Record<SummaryKey, string> = {
  title: "Title",
  author: "Author",
  audience: "Audience",
};

const frontmatterRecord = frontmatter as Record<string, unknown>;

const summaryEntries = summaryKeys
  .map((key) => {
    const value = frontmatterRecord[key];
    if (typeof value === "undefined" || value === null) {
      return null;
    }

    return {
      key,
      label: summaryLabels[key],
      value: formatSummaryValue(value),
    };
  })
  .filter(
    (entry): entry is { key: SummaryKey; label: string; value: string } =>
      entry !== null,
  );

const summaryMap = summaryEntries.reduce<Partial<Record<SummaryKey, string>>>(
  (acc, { key, value }) => {
    acc[key] = value;
    return acc;
  },
  {},
);

const detailedEntries = Object.entries(frontmatterRecord)
  .filter(([key]) => !summaryKeys.includes(key as SummaryKey))
  .map(([key, value]) => ({
    key,
    value: formatFrontmatterValue(value),
  }));

const orderedEntries = [
  ...summaryKeys
    .filter((key) => key in frontmatterRecord)
    .map((key) => ({
      key,
      value: formatFrontmatterValue(frontmatterRecord[key]),
    })),
  ...detailedEntries,
];

const createdLabel = formatDateForDisplay(frontmatter.created);
const updatedLabel = formatDateForDisplay(frontmatter.updated);
const metaSegments = [
  summaryMap.author && `By ${summaryMap.author}`,
  createdLabel && `Written on ${createdLabel}`,
  updatedLabel && `Updated ${updatedLabel}`,
  summaryMap.audience && `Audience ${summaryMap.audience}`,
].filter(Boolean) as string[];
const metaLine = metaSegments.join(" Â· ");
const hasSummaryPills = Boolean(summaryMap.author || summaryMap.audience);
const contentClass = `content-body${trimFirstHeading ? " trim-heading" : ""}`;
---

<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta charset="utf-8" />
    <title>{frontmatter.title}</title>
  </head>
  <body>
    <div class="page-grid">
      <main>
        <!--<h1>{frontmatter.title}</h1>-->
        <!--{metaLine && <p class="meta">{metaLine}</p>}-->
        <div class={contentClass}>
          <slot />
        </div>
      </main>
      <aside class="frontmatter-column">
        <details class="frontmatter-menu">
          <summary class="frontmatter-summary">
            <span class="summary-label">Frontmatter</span>
            {
              summaryMap.title && (
                <span class="summary-title">{summaryMap.title}</span>
              )
            }
            {
              hasSummaryPills && (
                <span class="summary-pill-group">
                  {summaryMap.author && (
                    <span class="summary-pill">
                      <span class="pill-key">Author</span>
                      <span class="pill-value">{summaryMap.author}</span>
                    </span>
                  )}
                  {summaryMap.audience && (
                    <span class="summary-pill">
                      <span class="pill-key">Audience</span>
                      <span class="pill-value">{summaryMap.audience}</span>
                    </span>
                  )}
                </span>
              )
            }
          </summary>
          <div class="panel">
            <dl>
              {
                orderedEntries.map(({ key, value }) => (
                  <div class="fm-row">
                    <dt>{key}</dt>
                    <dd>{value}</dd>
                  </div>
                ))
              }
            </dl>
          </div>
        </details>
      </aside>
    </div>
  </body>
</html>
